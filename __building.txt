NOTES ON BUILDING WAKAN.

I. For Ansi builds you'll need non-unicode Delphi (at most Delphi 2007).
Install everything as per Components\readme.txt.

II. Copy wakan.chr, *.dic from live wakan installation.

III. Build Jalet.dpr.

If you want to pack executable, you'll need something like UPX.exe which is not included here.

IV. Run Wakan to generate:
  wakan.usr -- user package
  wakan.sod -- stroke order package built from strokes.csv



OPTIMIZATION

1. Enable inlining (inline:on or inline:auto).
It's very important that some critical functions are inlined for speed in release builds.
Therefore if you're doing the building, READ THIS:
http://docwiki.embarcadero.com/RADStudio/XE/en/Calling_Procedures_and_Functions#Using_the_inline_Directive
Note the list of cases when the inlining is not done.

2. Disable "Compiling> String format checking" in Delphi Project Options:
http://www.micro-isv.asia/2008/10/needless-string-checks-with-ensureunicodestring/
They shouldn't be needed, and even if by some mistake we put Ansi chars into UnicodeString, we better crash and fix that instead of hiding the bug.
Enabling this option also effectively disables the "const s:string" optimizations since functions will get refcount management frames for strings anyway.


DEPENDENCIES

1. UNICONV.exe - required for dictionary import.
http://ringtail.its.monash.edu.au/pub/nihongo/uniconv.zip
http://ringtail.its.monash.edu.au/pub/nihongo/uniconv.txt
Also see: http://www.autohotkey.com/board/topic/9831-uniconv-convert-unicode-cmd/

2. WORDFREQ_CK - required for adding frequency information to dictionaries
http://ftp.monash.edu.au/pub/nihongo/00INDEX.html
http://ftp.monash.edu.au/pub/nihongo/wordfreq_ck.gz
Also see: http://code.google.com/p/wakan/issues/detail?id=66